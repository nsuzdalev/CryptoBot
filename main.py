import os
import requests
from datetime import datetime
import pytz

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKENS = ['BTC', 'ETH', 'ARB', 'SOL', 'APT', 'DOT', 'W', 'HFT', 'LTC', 'ATOM', 'ONDO']
CHAT_ID = os.getenv("CHAT_ID")
BOT_TOKEN = os.getenv("BOT_TOKEN")
CMC_API_KEY = os.getenv("CMC_API_KEY")  # –¢–≤–æ–π –∫–ª—é—á –æ—Ç CoinMarketCap (–µ—Å–ª–∏ –±—É–¥–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)
TELEGRAM_API = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω —Å CoinGecko (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∫–ª—é—á–∞) ===
def fetch_prices():
    ids_map = {
        'BTC': 'bitcoin', 'ETH': 'ethereum', 'ARB': 'arbitrum', 'SOL': 'solana',
        'APT': 'aptos', 'DOT': 'polkadot', 'W': 'wormhole', 'HFT': 'hashflow',
        'LTC': 'litecoin', 'ATOM': 'cosmos', 'ONDO': 'ondo-finance'
    }
    ids = ','.join(ids_map[token] for token in TOKENS)
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={ids}&vs_currencies=usd"
    res = requests.get(url)
    data = res.json()
    return {token: data[ids_map[token]]['usd'] for token in TOKENS}

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á—ë—Ç–∞ ===
def generate_report(prices: dict) -> str:
    now = datetime.now(pytz.timezone("Europe/Minsk")).strftime("%d.%m.%Y %H:%M")
    lines = [f"üìä –ö—Ä–∏–ø—Ç–æ–æ—Ç—á—ë—Ç –Ω–∞ {now} (–≤—Ä–µ–º—è –ú–∏–Ω—Å–∫)
"]
    for token in TOKENS:
        lines.append(f"{token}: ${prices[token]:,.2f}")
    lines.append("
‚ÑπÔ∏è –ü—Ä–æ–≥–Ω–æ–∑, –¥–æ–º–∏–Ω–∞—Ü–∏—è, —É—Ä–æ–≤–Ω–∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –∏ —Å–∫–∞—á–∫–∏ —Ü–µ–Ω –≤ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")
    lines.append("
‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç.")
    return '\n'.join(lines)

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ===
def send_to_telegram(text: str):
    requests.post(TELEGRAM_API, data={
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": "Markdown"
    })

# === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    try:
        prices = fetch_prices()
        report = generate_report(prices)
        send_to_telegram(report)
    except Exception as e:
        send_to_telegram(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {str(e)}")

if __name__ == "__main__":
    main()
