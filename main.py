import os
import requests
from datetime import datetime, timedelta
import pytz

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–µ—Ç –∏ –Ω–∞–∑–≤–∞–Ω–∏–π ---
COINS = [
    ('bitcoin', 'BTC'),
    ('ethereum', 'ETH'),
    ('arbitrum', 'ARB'),
    ('solana', 'SOL'),
    ('aptos', 'APT'),
    ('polkadot', 'DOT'),
    ('wormhole', 'W'),
    ('hashflow', 'HFT'),
    ('litecoin', 'LTC'),
    ('cosmos', 'ATOM'),
    ('ondo-finance', 'ONDO')
]

# --- Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

# --- –í—Ä–µ–º—è –¥–ª—è –ú–∏–Ω—Å–∫–∞ ---
MINSK_TZ = pytz.timezone('Europe/Minsk')
now = datetime.now(MINSK_TZ)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω, –∏–∑–º–µ–Ω–µ–Ω–∏–π, SMA –∏ –∏—Å—Ç–æ—Ä–∏–∏ ---
def fetch_market_data():
    ids = ','.join([coin[0] for coin in COINS])
    url = f"https://api.coingecko.com/api/v3/simple/price"
    params = {
        "ids": ids,
        "vs_currencies": "usd",
        "include_24hr_change": "true"
    }
    data = requests.get(url, params=params).json()
    return data

def fetch_historical(coin_id, days=7):
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –ø–æ —á–∞—Å–∞–º
    url = f"https://api.coingecko.com/api/v3/coins/{coin_id}/market_chart"
    params = {"vs_currency": "usd", "days": days, "interval": "hourly"}
    data = requests.get(url, params=params).json()
    prices = [p[1] for p in data.get("prices",[])]
    timestamps = [p[0] for p in data.get("prices",[])]
    return prices, timestamps

def sma(prices, period=24):
    if len(prices) < period:
        return None
    return sum(prices[-period:]) / period

# --- –î–æ–º–∏–Ω–∞—Ü–∏—è BTC ---
def fetch_btc_dominance():
    try:
        res = requests.get("https://api.coingecko.com/api/v3/global")
        btc_dom = res.json()['data']['market_cap_percentage']['btc']
        return btc_dom
    except:
        return None

# --- –ù–æ–≤–æ—Å—Ç–∏ –∏ X (Twitter)/CryptoPanic ---
def fetch_news():
    try:
        url = "https://cryptopanic.com/api/v1/posts/?auth_token=demo&currencies=BTC,ETH,ARB,SOL,APT,DOT,W,HFT,LTC,ATOM,ONDO&public=true"
        res = requests.get(url)
        items = res.json().get("results", [])
        news = []
        for item in items[:3]:  # –º–∞–∫—Å–∏–º—É–º 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–∏
            if item.get("title"):
                news.append(f"‚Äî {item['title']}")
        return news
    except:
        return []

# --- –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–ø—Ä–æ—Å—Ç—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã) ---
def get_levels(prices):
    if len(prices) < 2:
        return None, None
    support = min(prices)
    resistance = max(prices)
    return round(support, 2), round(resistance, 2)

# --- –ê–Ω–∞–ª–∏–∑ —Å–∫–∞—á–∫–æ–≤ ---
def analyze_jumps(prices, period_hours, threshold):
    if len(prices) < period_hours+1:
        return 0
    start = prices[-period_hours-1]
    end = prices[-1]
    pct = 100 * (end - start) / start if start else 0
    return pct

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ ---
def build_report():
    dt = now.strftime('%d.%m.%Y %H:%M')
    report = [f"üìä –ö—Ä–∏–ø—Ç–æ–æ—Ç—á—ë—Ç –Ω–∞ {dt} (–≤—Ä–µ–º—è –ú–∏–Ω—Å–∫)\n"]

    # –¶–µ–Ω—ã, –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –ø—Ä–æ–≥–Ω–æ–∑, —É—Ä–æ–≤–Ω–∏
    market = fetch_market_data()
    report.append("üí∞ –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã (–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á):")
    for coin_id, symbol in COINS:
        price = market.get(coin_id, {}).get("usd", None)
        change = market.get(coin_id, {}).get("usd_24h_change", 0.0)
        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã
        hist, _ = fetch_historical(coin_id, 7)
        # –ü—Ä–æ–≥–Ω–æ–∑ (SMA + –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
        forecast = "‚Äî"
        if hist and len(hist) >= 168:  # 7 –¥–Ω–µ–π*24—á
            avg = sma(hist, 24)
            direction = "‚Üë" if hist[-1] > avg else "‚Üì"
            forecast = f"{direction} SMA7–¥–Ω: ${avg:.2f}"
        # –£—Ä–æ–≤–Ω–∏
        support, resistance = get_levels(hist[-168:]) if hist else (None, None)
        arrow = "üî∫" if change > 0 else "üîª"
        change_txt = f"{arrow}{abs(change):.2f}%"
        support_txt = f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞: ${support}" if support else ""
        resistance_txt = f"–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: ${resistance}" if resistance else ""
        report.append(
            f"{symbol}: ${price:,.2f} ({change_txt}) | {forecast} | {support_txt} {resistance_txt}"
        )

    # –î–æ–º–∏–Ω–∞—Ü–∏—è BTC
    dom = fetch_btc_dominance()
    if dom:
        report.append(f"\nüìà –î–æ–º–∏–Ω–∞—Ü–∏—è BTC: {dom:.2f}%")

    # –ê–Ω–∞–ª–∏–∑ —Å–∫–∞—á–∫–æ–≤
    jump_lines = []
    for coin_id, symbol in COINS:
        hist, _ = fetch_historical(coin_id, 1)
        pct_1h = analyze_jumps(hist, 1, 10)
        if abs(pct_1h) >= 10:
            jump_lines.append(f"{symbol}: {'üî∫' if pct_1h>0 else 'üîª'}{pct_1h:.2f}% –∑–∞ 1—á üö®")
        hist4, _ = fetch_historical(coin_id, 4)
        pct_4h = analyze_jumps(hist4, 4, 5)
        if abs(pct_4h) >= 5:
            jump_lines.append(f"{symbol}: {'üî∫' if pct_4h>0 else 'üîª'}{pct_4h:.2f}% –∑–∞ 4—á")
    if jump_lines:
        report.append("\n‚ö°Ô∏è –†–µ–∑–∫–∏–µ —Å–∫–∞—á–∫–∏ —Ü–µ–Ω –∑–∞ 1—á –∏ 4—á:")
        report += jump_lines

    # –ù–æ–≤–æ—Å—Ç–∏
    news = fetch_news()
    if news:
        report.append("\nüì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–¥—ë–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–∏–≥–Ω–∞–ª—ã:")
        report += news

    # –õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏ (–ø—Å–µ–≤–¥–æ-—É—Ä–æ–≤–Ω–∏)
    report.append("\nüîë –ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π (–ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏):")
    for coin_id, symbol in COINS:
        hist, _ = fetch_historical(coin_id, 7)
        if hist and len(hist) > 48:
            # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: –º–∞–∫—Å–∏–º—É–º/–º–∏–Ω–∏–º—É–º –¥–Ω—è/–Ω–µ–¥–µ–ª–∏
            week_min = min(hist[-168:])
            week_max = max(hist[-168:])
            day_min = min(hist[-24:])
            day_max = max(hist[-24:])
            report.append(f"{symbol}: –¥–µ–Ω—å [{day_min:.2f} ‚Äî {day_max:.2f}], –Ω–µ–¥–µ–ª—è [{week_min:.2f} ‚Äî {week_max:.2f}]")

    report.append("\n‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç.")
    return "\n".join(report)

# --- Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
def send_report(text):
    requests.post(TG_API, data={
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": "Markdown"
    })

def main():
    report = build_report()
    send_report(report)

if __name__ == "__main__":
    main()
